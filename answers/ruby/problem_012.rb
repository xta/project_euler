# Highly divisible triangular number

# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?

require 'prime'

def triangle_number(n)
  n * (n+1)/2
end

def factor_size_of(number)
  1.upto(Math.sqrt(number)).select {|i| number % i == 0}.inject([]) do |factors, factor|
    factors << factor
    factors << number/factor if factor != number/factor

    factors
  end.size
end

1.upto(Float::INFINITY).each do |i|
  triangle_num  = triangle_number(i)
  next if Prime.prime?(i)

  if factor_size_of(triangle_num) > 500
    puts triangle_num # 76576500
    break
  end
end
